{"version":3,"sources":["store/user-path/index.ts","components/MapEditor/style.ts","components/MapEditor/MapEditor.tsx","components/UserPath/UserPath.tsx","common/hooks/useUserGeoWatch.ts","services/navigator.ts","components/MapBase/component/ViewportInfo/ViewportInfo.tsx","components/ModeButtons/ModeButtons.tsx","components/CurrentPoint/CurrentPoint.tsx","components/MapAreas/useContainsAreas.ts","components/MapAreas/MapAreas.tsx","components/MapBase/MapBase.tsx","components/MapBase/config.ts","App.tsx","reportWebVitals.ts","index.tsx","store/areas/index.ts","store/mode/index.ts","store/mode/reducer.ts","store/areas/reducer.ts","store/user-path/reducer.ts","store/index.ts","store/areas/state.ts","store/areas/actions.ts","store/areas/selector.ts","store/user-path/state.ts","store/user-path/actions.ts","store/user-path/selector.ts","store/mode/state.ts","store/mode/actions.ts","store/mode/selector.ts","store/app-reducer.ts","store/app-store.ts"],"names":["getEditHandleStyle","feature","state","RENDER_STATE","SELECTED","HOVERED","UNCOMMITTED","fill","fillOpacity","stroke","strokeWidth","r","getFeatureStyle","index","CLOSING","strokeDasharray","buttonWrap","position","zIndex","top","right","display","flexDirection","gap","MapEditor","dispatch","useDispatch","mode","setMode","useState","EditingMode","selectedFeatureIndex","setSelectedFeatureIndex","editorRef","useRef","areas","useSelector","getAreasSelector","useEffect","current","getFeatures","length","addFeatures","onSelect","useCallback","options","onUpdate","editType","setAreasAction","onDelete","async","deleteFeatures","ref","style","width","height","clickRadius","editHandleShape","featureStyle","editHandleStyle","featuresDraggable","constructor","name","onClick","DrawPolygonMode","UserPath","path","getUserPathSourceSelector","id","type","data","layout","paint","useUserGeoWatch","callback","watchID","watchPosition","setPosState","pos","pushPositionAction","navigator","geolocation","e","console","log","enableHighAccuracy","maximumAge","startWatchPosition","clearWatch","stopWatchPosition","ViewportInfo","viewport","longitude","latitude","zoom","className","toFixed","ModeButtons","getModeSelector","turnOnNavigateHandler","turnOnNavigateAction","turnOnEditHandler","turnOnEditAction","turnOnFreeHandler","turnOnFreeAction","classNames","disabled","CurrentPoint","getUserPositionSelector","coords","useContainsAreas","map","i","poly","polygon","turf","geometry","coordinates","point","MapAreas","containsAreas","MapBase","setViewport","mapStyle","onViewportChange","mapboxApiAccessToken","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","store","appStore","document","getElementById","TURN_ON_NAVIGATE","TURN_ON_EDIT","TURN_ON_FREE","modeReducer","initialState","action","SET_AREAS","areasReducer","PUSH_POSITION","userPathReducer","userPath","createSelector","geoPath","properties","appReducer","combineReducers","createStore","composeWithDevTools"],"mappings":"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","file":"static/js/main.836f74aa.chunk.js","sourcesContent":["export * from './types'\r\nexport * from './state'\r\nexport * from './reducer'\r\nexport * from './actions'\r\nexport * from './selector'\r\n","import {RENDER_STATE} from 'react-map-gl-draw';\r\nimport {editHandleStyle as defaultEditHandleStyle} from \"react-map-gl-draw/dist-types/style\";\r\n\r\nexport const getEditHandleStyle: typeof defaultEditHandleStyle = ({feature, state}) =>  {\r\n  switch (state) {\r\n    case RENDER_STATE.SELECTED:\r\n    case RENDER_STATE.HOVERED:\r\n    case RENDER_STATE.UNCOMMITTED:\r\n      return {\r\n        fill: 'rgb(251, 176, 59)',\r\n        fillOpacity: 1,\r\n        stroke: 'rgb(255, 255, 255)',\r\n        strokeWidth: 2,\r\n        r: 7\r\n      };\r\n\r\n    default:\r\n      return {\r\n        fill: 'rgb(251, 176, 59)',\r\n        fillOpacity: 1,\r\n        stroke: 'rgb(255, 255, 255)',\r\n        strokeWidth: 2,\r\n        r: 5\r\n      };\r\n  }\r\n}\r\n\r\nexport const getFeatureStyle: typeof defaultEditHandleStyle = ({feature, index, state}) => {\r\n  switch (state) {\r\n    case RENDER_STATE.SELECTED:\r\n    case RENDER_STATE.HOVERED:\r\n    case RENDER_STATE.UNCOMMITTED:\r\n    case RENDER_STATE.CLOSING:\r\n      return {\r\n        stroke: 'rgb(251, 176, 59)',\r\n        strokeWidth: 2,\r\n        fill: 'rgb(251, 176, 59)',\r\n        fillOpacity: 0.3,\r\n        strokeDasharray: '4,2'\r\n      };\r\n\r\n    default:\r\n      return {\r\n        stroke: 'rgb(60, 178, 208)',\r\n        strokeWidth: 2,\r\n        fill: 'rgb(60, 178, 208)',\r\n        fillOpacity: 0.1\r\n      };\r\n  }\r\n}","import React, { useCallback, useEffect, useRef, useState } from 'react'\nimport { DrawPolygonMode, EditingMode, Editor } from 'react-map-gl-draw'\nimport { getEditHandleStyle, getFeatureStyle } from './style'\nimport CSS from 'csstype'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getAreasSelector, setAreasAction } from '../../store/areas'\nimport { Feature } from '@nebula.gl/edit-modes/src/geojson-types'\n\nconst buttonWrap: CSS.Properties = {\n  position: 'fixed',\n  zIndex: 999,\n  top: '40px',\n  right: '20px',\n  display: 'flex',\n  flexDirection: 'column',\n  gap: '10px',\n}\n\nconst MapEditor: React.FC = () => {\n  const dispatch = useDispatch()\n  const [mode, setMode] = useState<EditingMode | DrawPolygonMode>(\n    new EditingMode()\n  )\n  const [selectedFeatureIndex, setSelectedFeatureIndex] = useState<\n    number | null\n  >(null)\n\n  const editorRef = useRef<Editor>(null)\n\n  const areas = useSelector(getAreasSelector)\n\n  useEffect(() => {\n    if (editorRef.current && editorRef.current.getFeatures().length === 0) {\n      editorRef.current.addFeatures(areas as Feature[])\n    }\n  }, [editorRef, areas])\n\n  const onSelect = useCallback((options) => {\n    setSelectedFeatureIndex(options && options.selectedFeatureIndex)\n  }, [])\n\n  const onUpdate = useCallback(\n    ({ editType }) => {\n      if (editType === 'addFeature') {\n        setMode(new EditingMode())\n        editorRef.current &&\n          dispatch(setAreasAction(editorRef.current.getFeatures()))\n      }\n    },\n    [dispatch]\n  )\n\n  const onDelete = useCallback(async () => {\n    if (selectedFeatureIndex !== null && selectedFeatureIndex >= 0) {\n      await (editorRef.current &&\n        editorRef.current.deleteFeatures(selectedFeatureIndex))\n      editorRef.current &&\n        dispatch(setAreasAction(editorRef.current.getFeatures()))\n    }\n  }, [selectedFeatureIndex, dispatch])\n\n  return (\n    <>\n      <Editor\n        ref={editorRef}\n        style={{ width: '100%', height: '100%' }}\n        clickRadius={12}\n        mode={mode as any}\n        onSelect={onSelect}\n        onUpdate={onUpdate}\n        editHandleShape={'circle'}\n        featureStyle={getFeatureStyle}\n        editHandleStyle={getEditHandleStyle}\n        featuresDraggable={true}\n      />\n      <div style={buttonWrap}>\n        {mode && mode.constructor.name !== 'DrawPolygonMode' && (\n          <button onClick={() => setMode(new DrawPolygonMode())}>\n            New poly\n          </button>\n        )}\n        {mode &&\n          mode.constructor.name !== 'DrawPolygonMode' &&\n          selectedFeatureIndex !== null && (\n            <button onClick={onDelete}>Delete</button>\n          )}\n      </div>\n    </>\n  )\n}\n\nexport default MapEditor\n","import React from 'react'\nimport { Layer, Source } from 'react-map-gl'\nimport { useSelector } from 'react-redux'\nimport { getUserPathSourceSelector } from 'store/user-path'\n\nconst UserPath: React.FC = () => {\n  const path = useSelector(getUserPathSourceSelector)\n  return (\n    <Source id='my-data' type='geojson' data={path}>\n      <Layer\n        id='user-path-layer'\n        type='line'\n        layout={{\n          'line-join': 'round',\n          'line-cap': 'round',\n        }}\n        paint={{\n          'line-color': '#01579b',\n          'line-width': 6,\n        }}\n      />\n    </Source>\n  )\n}\n\nexport default UserPath\n","import { useEffect } from 'react'\nimport { stopWatchPosition, watchPosition } from 'services/navigator'\nimport { useDispatch } from 'react-redux'\nimport { pushPositionAction } from 'store/user-path'\n\nconst useUserGeoWatch = (\n  callback?: (position: GeolocationPosition) => void\n) => {\n  const dispatch = useDispatch()\n  useEffect(() => {\n    const startWatchPosition = () =>\n      watchPosition((pos) => {\n        if (pos) {\n          dispatch(pushPositionAction(pos))\n          callback && callback(pos)\n        }\n      })\n    const watchID = startWatchPosition()\n    return () => {\n      stopWatchPosition(watchID)\n    }\n  }, [dispatch, callback])\n}\n\nexport default useUserGeoWatch\n","export const watchPosition = (\n  setPosState: (pos: null | GeolocationPosition) => void\n) => {\n  const readPosition = (position: GeolocationPosition) => {\n    setPosState(position)\n  }\n  return navigator.geolocation.watchPosition(\n    readPosition,\n    (e) => console.log(e),\n    {\n      enableHighAccuracy: true,\n      maximumAge: 5 * 1000,\n    }\n  )\n}\n\nexport const stopWatchPosition = (watchID: number) =>\n  navigator.geolocation.clearWatch(watchID)\n","import Rect from 'react'\n\nimport './ViewportInfo.css'\n\ninterface ViewportInfoProps {\n  viewport: {\n    longitude: number\n    latitude: number\n    zoom: number\n  }\n}\n\nconst ViewportInfo: Rect.FC<ViewportInfoProps> = ({\n  viewport: { longitude, latitude, zoom },\n}) => {\n  return (\n    <div className='viewport-info'>\n      <span className='viewport-info__item'>\n        longitude: {longitude.toFixed(4)}\n      </span>\n      <span className='viewport-info__item'>\n        latitude: {latitude.toFixed(4)}\n      </span>\n      <span className='viewport-info__item'>zoom: {zoom.toFixed(4)}</span>\n    </div>\n  )\n}\n\nexport default ViewportInfo\n","import React, { useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  getModeSelector,\n  turnOnEditAction,\n  turnOnFreeAction,\n  turnOnNavigateAction,\n} from 'store/mode'\nimport classNames from 'classnames'\nimport './ModeButtons.css'\n\nconst ModeButtons: React.FC = () => {\n  const dispatch = useDispatch()\n  const mode = useSelector(getModeSelector)\n\n  const turnOnNavigateHandler = useCallback(\n    () => dispatch(turnOnNavigateAction()),\n    [dispatch]\n  )\n  const turnOnEditHandler = useCallback(\n    () => dispatch(turnOnEditAction()),\n    [dispatch]\n  )\n\n  const turnOnFreeHandler = useCallback(\n    () => dispatch(turnOnFreeAction()),\n    [dispatch]\n  )\n\n  return (\n    <div className='mode-bar'>\n      <button\n        onClick={turnOnFreeHandler}\n        className={classNames('mode-bar__button', {\n          'mode-bar__button--active': mode === 'FREE',\n        })}\n        disabled={mode === 'FREE'}\n      >\n        Free mode\n      </button>\n      <button\n        onClick={turnOnNavigateHandler}\n        className={classNames('mode-bar__button', {\n          'mode-bar__button--active': mode === 'NAVIGATE',\n        })}\n        disabled={mode === 'NAVIGATE'}\n      >\n        Navigate mode\n      </button>\n      <button\n        onClick={turnOnEditHandler}\n        className={classNames('mode-bar__button', {\n          'mode-bar__button--active': mode === 'EDIT',\n        })}\n        disabled={mode === 'EDIT'}\n      >\n        Edit mode\n      </button>\n    </div>\n  )\n}\n\nexport default ModeButtons\n","import React from 'react'\nimport { Marker } from 'react-map-gl'\nimport { useSelector } from 'react-redux'\nimport { getUserPositionSelector } from '../../store/user-path'\nimport './CurrentPoint.css'\n\nconst CurrentPoint: React.FC = () => {\n  const position = useSelector(getUserPositionSelector)\n  return (\n    position && (\n      <Marker\n        longitude={position.coords.longitude}\n        latitude={position.coords.latitude}\n      >\n        <div className='point' />\n      </Marker>\n    )\n  )\n}\n\nexport default CurrentPoint\n","import { useSelector } from 'react-redux'\nimport { getAreasSelector } from '../../store/areas'\nimport { getUserPositionSelector } from '../../store/user-path'\nimport { FeatureOf, Polygon } from '@nebula.gl/edit-modes/src/geojson-types'\nimport * as turf from '@turf/turf'\n\nconst useContainsAreas = () => {\n  const areas = useSelector(getAreasSelector)\n  const position = useSelector(getUserPositionSelector)\n\n  return position\n    ? areas.map((i) => {\n        const poly: FeatureOf<Polygon> = i as FeatureOf<Polygon>\n        const polygon = turf.polygon(poly.geometry.coordinates)\n\n        const point = turf.point([\n          position.coords.longitude,\n          position.coords.latitude,\n        ])\n\n        return turf.booleanContains(polygon, point)\n      })\n    : []\n}\n\nexport default useContainsAreas\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { getAreasSelector } from '../../store/areas'\nimport { Layer, Source } from 'react-map-gl'\nimport useContainsAreas from './useContainsAreas'\n\nconst MapAreas: React.FC = () => {\n  const areas = useSelector(getAreasSelector)\n  const containsAreas = useContainsAreas()\n\n  return (\n    <>\n      {areas.map((i, index) => (\n        <Source key={index} id={'feature' + index} type='geojson' data={i}>\n          <Layer\n            id={'feature' + index + '_layer'}\n            type='fill'\n            paint={{\n              'fill-color': containsAreas[index] ? '#ff867c' : '#cfff95',\n              'fill-opacity': 0.6,\n            }}\n          />\n          <Layer\n            id={'feature' + index + '_layer_outline'}\n            type='line'\n            paint={{\n              'line-color': containsAreas[index] ? '#b61827' : '#6b9b37',\n              'line-width': 3,\n            }}\n          />\n        </Source>\n      ))}\n    </>\n  )\n}\n\nexport default MapAreas\n","import React, { useEffect, useState } from 'react'\nimport MapGL, { NavigationControl } from 'react-map-gl'\nimport MapEditor from '../MapEditor/MapEditor'\nimport UserPath from '../UserPath/UserPath'\nimport useUserGeoWatch from 'common/hooks/useUserGeoWatch'\nimport { STYLE, TOKEN } from './config' // Need to GitHub pages work\nimport ViewportInfo from './component/ViewportInfo/ViewportInfo'\nimport ModeButtons from 'components/ModeButtons/ModeButtons'\nimport { useSelector } from 'react-redux'\nimport { getModeSelector } from 'store/mode'\nimport { getUserPositionSelector } from 'store/user-path'\nimport CurrentPoint from '../CurrentPoint/CurrentPoint'\nimport MapAreas from 'components/MapAreas/MapAreas'\n\n// const TOKEN = process.env.REACT_APP_MAPBOX_TOKEN\n// const STYLE = process.env.REACT_APP_MAPBOX_STYLE\n\nconst MapBase: React.FC = () => {\n  const [viewport, setViewport] = useState({\n    longitude: -91.874,\n    latitude: 42.76,\n    zoom: 12,\n  })\n\n  const mode = useSelector(getModeSelector)\n  const position = useSelector(getUserPositionSelector)\n\n  useEffect(() => {\n    switch (mode) {\n      case 'FREE':\n        return undefined\n      case 'NAVIGATE': {\n        position &&\n          setViewport({\n            longitude: position.coords.longitude,\n            latitude: position.coords.latitude,\n            zoom: 16,\n          })\n        return undefined\n      }\n    }\n  }, [mode, position, setViewport])\n\n  useUserGeoWatch()\n\n  return (\n    <div\n      style={{\n        width: '100vw',\n        height: '100vh',\n      }}\n    >\n      <MapGL\n        {...viewport}\n        width='100%'\n        height='100%'\n        mapStyle={STYLE}\n        onViewportChange={setViewport}\n        mapboxApiAccessToken={TOKEN}\n      >\n        {mode !== 'NAVIGATE' && <NavigationControl />}\n        {mode === 'EDIT' && <MapEditor />}\n        <UserPath />\n        {mode !== 'EDIT' && <MapAreas />}\n        <CurrentPoint />\n      </MapGL>\n      <ViewportInfo viewport={viewport} />\n      <ModeButtons />\n    </div>\n  )\n}\n\nexport default MapBase\n","export const TOKEN =\r\n  'pk.eyJ1Ijoia2Fyay1sZW8iLCJhIjoiY2tycTVqeDF5MDRmaDJucHF6bjl0aWRlMSJ9.fVvoRu7-JIUyyIkbFQ9vQA'\r\n  //'pk.eyJ1Ijoia2Fyay1sZW8iLCJhIjoiY2tycWswbnF1MDk2ajJ3bzB6eWE5OGgyZSJ9.LOcclpJ7wZ_L-udL_G7JQA'\r\nexport const STYLE = 'mapbox://styles/kark-leo/ckrq5pa1k7b9j17qr2tvv7ixy'\r\n","import React from 'react';\r\nimport './App.css';\r\nimport MapBase from './components/MapBase/MapBase';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <MapBase/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\nimport { appStore } from './store';\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={appStore}><App /></Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","export * from './types'\nexport * from './state'\nexport * from './reducer'\nexport * from './actions'\nexport * from './selector'\n","export * from './types'\nexport * from './state'\nexport * from './reducer'\nexport * from './actions'\nexport * from './selector'\n","import { Action, initialState, ModeState } from './'\n\nexport const TURN_ON_NAVIGATE = 'MODE/TURN_ON_NAVIGATE' as const\nexport const TURN_ON_EDIT = 'MODE/TURN_ON_EDIT' as const\nexport const TURN_ON_FREE = 'MODE/TURN_ON_FREE' as const\n\nexport const modeReducer = (\n  state: ModeState = initialState,\n  action: Action\n): ModeState => {\n  switch (action.type) {\n    case TURN_ON_NAVIGATE:\n      return { ...state, mode: 'NAVIGATE' }\n    case TURN_ON_EDIT:\n      return { ...state, mode: 'EDIT' }\n    case TURN_ON_FREE:\n      return { ...state, mode: 'FREE' }\n    default:\n      return state\n  }\n}\n","import { Action, initialState, AreasState } from './'\n\nexport const SET_AREAS = 'AREAS/SET_AREAS' as const\n\nexport const areasReducer = (\n  state: AreasState = initialState,\n  action: Action\n): AreasState => {\n  switch (action.type) {\n    case SET_AREAS:\n      return { ...state, areas: action.areas }\n    default:\n      return state\n  }\n}\n","import { Action, initialState, UserPathState } from './'\n\nexport const PUSH_POSITION = 'USER_PATH/PUSH__POSITION' as const\n\nexport const userPathReducer = (\n  state: UserPathState = initialState,\n  action: Action\n): UserPathState => {\n  switch (action.type) {\n    case PUSH_POSITION:\n      return {\n        ...state,\n        path: [...state.path, action.position],\n        position: action.position,\n      }\n    default:\n      return state\n  }\n}\n","export * from './app-reducer'\r\nexport * from './app-store'\r\nexport * from './types'","import { AreasState } from './types'\n\nexport const initialState: AreasState = {\n  areas: [],\n}\n","import { SET_AREAS } from './reducer'\nimport { AreaType } from './types'\n\nexport const setAreasAction = (areas: AreaType[]) => ({\n  type: SET_AREAS,\n  areas,\n})\n","import { AppState } from '../types'\nimport { AreaType } from './types'\n\nexport const getAreasSelector = (state: AppState): AreaType[] =>\n  state.areas.areas\n","import { UserPathState } from './types'\n\nexport const initialState: UserPathState = {\n  path: [],\n  position: null,\n}\n","import { PUSH_POSITION } from './reducer'\r\n\r\nexport const pushPositionAction = (position: GeolocationPosition) => ({\r\n  type: PUSH_POSITION,\r\n  position,\r\n})\r\n","import { AppState } from '../types'\nimport { createSelector } from 'reselect'\nimport * as GeoJSON from 'geojson'\n\nexport const getUserPathSelector = (state: AppState): GeolocationPosition[] =>\n  state.userPath.path\n\nexport const getUserPositionSelector = (\n  state: AppState\n): GeolocationPosition | null => state.userPath.position\n\nexport const getUserPathSourceSelector = createSelector(\n  getUserPathSelector,\n  (geoPath): GeoJSON.Feature<GeoJSON.Geometry> => ({\n    type: 'Feature',\n    properties: {},\n    geometry: {\n      type: 'LineString',\n      coordinates: geoPath.map((i) => [i.coords.longitude, i.coords.latitude]),\n    },\n  })\n)\n","import { ModeState } from './types'\n\nexport const initialState: ModeState = {\n  mode: 'FREE',\n}\n","import { TURN_ON_EDIT, TURN_ON_FREE, TURN_ON_NAVIGATE } from './reducer'\n\nexport const turnOnEditAction = () => ({\n  type: TURN_ON_EDIT,\n})\n\nexport const turnOnNavigateAction = () => ({\n  type: TURN_ON_NAVIGATE,\n})\n\nexport const turnOnFreeAction = () => ({\n  type: TURN_ON_FREE,\n})\n","import { AppState } from '../types'\nimport { ModeType } from './types'\n\nexport const getModeSelector = (state: AppState): ModeType => state.mode.mode\n","import { combineReducers } from 'redux'\nimport { userPathReducer } from './user-path'\nimport { modeReducer } from './mode'\nimport { areasReducer } from './areas'\n\nexport const appReducer = combineReducers({\n  userPath: userPathReducer,\n  mode: modeReducer,\n  areas: areasReducer,\n})\n","import { createStore } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { appReducer } from \".\";\r\n\r\nexport const appStore = createStore(\r\n  appReducer,\r\n  composeWithDevTools()\r\n)"],"sourceRoot":""}