{"version":3,"sources":["components/MapEditor/style.ts","components/MapEditor/MapEditor.tsx","components/UserPath/UserPath.tsx","services/navigator.ts","common/hooks/useUserGeoWatch.ts","components/MapBase/MapBase.tsx","App.tsx","reportWebVitals.ts","index.tsx","store/user-path/index.ts","store/user-path/reducer.ts","store/index.ts","store/user-path/state.ts","store/user-path/actions.ts","store/user-path/selector.ts","store/app-reducer.ts","store/app-store.ts"],"names":["getEditHandleStyle","feature","state","RENDER_STATE","SELECTED","HOVERED","UNCOMMITTED","fill","fillOpacity","stroke","strokeWidth","r","getFeatureStyle","index","CLOSING","strokeDasharray","buttonWrap","position","top","right","display","flexDirection","gap","MapEditor","useState","mode","setMode","selectedFeatureIndex","setSelectedFeatureIndex","editorRef","useRef","onSelect","useCallback","options","onUpdate","editType","EditingMode","onDelete","current","deleteFeatures","ref","style","width","height","clickRadius","editHandleShape","featureStyle","editHandleStyle","featuresDraggable","onClick","DrawPolygonMode","UserPath","path","useSelector","getUserPathSourceSelector","id","type","data","layout","paint","getCurrentPosition","setPosState","a","readPosition","navigator","geolocation","watchPosition","e","console","log","useUserGeoWatch","dispatch","useDispatch","pos","setPos","useEffect","getPosition","pushPositionAction","MapBase","longitude","latitude","zoom","viewport","setViewport","mapStyle","process","onViewportChange","mapboxApiAccessToken","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","store","appStore","document","getElementById","PUSH_POSITION","userPathReducer","initialState","action","createSelector","userPath","geoPath","properties","geometry","coordinates","map","i","coords","appReducer","combineReducers","createStore","composeWithDevTools"],"mappings":"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","file":"static/js/main.901b8711.chunk.js","sourcesContent":["import {RENDER_STATE} from 'react-map-gl-draw';\r\nimport {editHandleStyle as defaultEditHandleStyle} from \"react-map-gl-draw/dist-types/style\";\r\n\r\nexport const getEditHandleStyle: typeof defaultEditHandleStyle = ({feature, state}) =>  {\r\n  switch (state) {\r\n    case RENDER_STATE.SELECTED:\r\n    case RENDER_STATE.HOVERED:\r\n    case RENDER_STATE.UNCOMMITTED:\r\n      return {\r\n        fill: 'rgb(251, 176, 59)',\r\n        fillOpacity: 1,\r\n        stroke: 'rgb(255, 255, 255)',\r\n        strokeWidth: 2,\r\n        r: 7\r\n      };\r\n\r\n    default:\r\n      return {\r\n        fill: 'rgb(251, 176, 59)',\r\n        fillOpacity: 1,\r\n        stroke: 'rgb(255, 255, 255)',\r\n        strokeWidth: 2,\r\n        r: 5\r\n      };\r\n  }\r\n}\r\n\r\nexport const getFeatureStyle: typeof defaultEditHandleStyle = ({feature, index, state}) => {\r\n  switch (state) {\r\n    case RENDER_STATE.SELECTED:\r\n    case RENDER_STATE.HOVERED:\r\n    case RENDER_STATE.UNCOMMITTED:\r\n    case RENDER_STATE.CLOSING:\r\n      return {\r\n        stroke: 'rgb(251, 176, 59)',\r\n        strokeWidth: 2,\r\n        fill: 'rgb(251, 176, 59)',\r\n        fillOpacity: 0.3,\r\n        strokeDasharray: '4,2'\r\n      };\r\n\r\n    default:\r\n      return {\r\n        stroke: 'rgb(60, 178, 208)',\r\n        strokeWidth: 2,\r\n        fill: 'rgb(60, 178, 208)',\r\n        fillOpacity: 0.1\r\n      };\r\n  }\r\n}","import React, { useCallback, useRef, useState } from 'react'\nimport { DrawPolygonMode, EditingMode, Editor } from 'react-map-gl-draw'\nimport { getEditHandleStyle, getFeatureStyle } from './style'\nimport CSS from 'csstype'\n\nconst buttonWrap: CSS.Properties = {\n  position: 'fixed',\n  top: '20px',\n  right: '20px',\n  display: 'flex',\n  flexDirection: 'column',\n  gap: '10px',\n}\n\nconst MapEditor: React.FC = () => {\n  const [mode, setMode] = useState<EditingMode | DrawPolygonMode | null>(null)\n  const [selectedFeatureIndex, setSelectedFeatureIndex] = useState<\n    number | null\n  >(null)\n\n  const editorRef = useRef<Editor>(null)\n\n  const onSelect = useCallback((options) => {\n    setSelectedFeatureIndex(options && options.selectedFeatureIndex)\n  }, [])\n\n  const onUpdate = useCallback(({ editType }) => {\n    if (editType === 'addFeature') {\n      setMode(new EditingMode())\n    }\n  }, [])\n\n  const onDelete = useCallback(() => {\n    if (selectedFeatureIndex !== null && selectedFeatureIndex >= 0) {\n      editorRef.current &&\n        editorRef.current.deleteFeatures(selectedFeatureIndex)\n    }\n  }, [selectedFeatureIndex])\n\n  // if (editorRef.current) editorRef.current.addFeatures(myFeatures)\n\n  return (\n    <>\n      <Editor\n        ref={editorRef}\n        style={{ width: '100%', height: '100%' }}\n        clickRadius={12}\n        mode={mode as any}\n        onSelect={onSelect}\n        onUpdate={onUpdate}\n        editHandleShape={'circle'}\n        featureStyle={getFeatureStyle}\n        editHandleStyle={getEditHandleStyle}\n        featuresDraggable={true}\n      />\n      <div style={buttonWrap}>\n        <button onClick={() => setMode(new DrawPolygonMode())}>New poly</button>\n        <button onClick={onDelete}>Delete</button>\n      </div>\n    </>\n  )\n}\n\nexport default MapEditor\n","import React from 'react'\nimport { Layer, Source } from 'react-map-gl'\nimport { useSelector } from 'react-redux'\nimport { getUserPathSourceSelector } from 'store/user-path'\n\nconst UserPath: React.FC = () => {\n  const path = useSelector(getUserPathSourceSelector)\n  return (\n    <Source id='my-data' type='geojson' data={path}>\n      <Layer\n        id='user-path-layer'\n        type='line'\n        layout={{\n          'line-join': 'round',\n          'line-cap': 'round',\n        }}\n        paint={{\n          'line-color': '#f0f',\n          'line-width': 8,\n        }}\n      />\n    </Source>\n  )\n}\n\nexport default UserPath\n","export const getCurrentPosition = async (\n  setPosState: (pos: null | GeolocationPosition) => void\n): Promise<void> => {\n  const readPosition = (position: GeolocationPosition) => {\n    setPosState(position)\n  }\n  await navigator.geolocation.watchPosition(readPosition, (e) => console.log(e))\n}\n","import { useEffect, useState } from 'react'\nimport { getCurrentPosition } from 'services/navigator'\nimport { useDispatch } from 'react-redux'\nimport { pushPositionAction } from 'store/user-path'\n\nconst useUserGeoWatch = () => {\n  const dispatch = useDispatch()\n  const [pos, setPos] = useState<GeolocationPosition | null>(null)\n  useEffect(() => {\n    const getPosition = async () => {\n      await getCurrentPosition(setPos)\n    }\n    getPosition()\n  }, [setPos])\n\n  useEffect(() => {\n    console.log(pos)\n    if (pos) dispatch(pushPositionAction(pos))\n  }, [pos, dispatch])\n}\n\nexport default useUserGeoWatch\n","import React, { useState } from 'react'\nimport MapGL, { NavigationControl } from 'react-map-gl'\nimport MapEditor from '../MapEditor/MapEditor'\nimport UserPath from '../UserPath/UserPath'\nimport useUserGeoWatch from 'common/hooks/useUserGeoWatch'\n\nconst TOKEN = process.env.REACT_APP_MAPBOX_TOKEN\nconst STYLE = process.env.REACT_APP_MAPBOX_STYLE\n\nconst MapBase: React.FC = () => {\n  const [viewport, setViewport] = useState({\n    longitude: -91.874,\n    latitude: 42.76,\n    zoom: 12,\n  })\n\n  useUserGeoWatch()\n\n  return (\n    <div\n      style={{\n        width: '100vw',\n        height: '100vh',\n      }}\n    >\n      <MapGL\n        {...viewport}\n        onClick={(e) => console.log(e)}\n        width='100%'\n        height='100%'\n        mapStyle={STYLE}\n        onViewportChange={setViewport}\n        mapboxApiAccessToken={TOKEN}\n      >\n        <NavigationControl />\n        <MapEditor />\n        <UserPath />\n      </MapGL>\n    </div>\n  )\n}\n\nexport default MapBase\n","import React from 'react';\nimport './App.css';\nimport MapBase from './components/MapBase/MapBase';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MapBase/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport { appStore } from './store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={appStore}><App /></Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export * from './types'\nexport * from './state'\nexport * from './reducer'\nexport * from './actions'\nexport * from './selector'\n","import { Action, initialState, UserPathState } from './'\n\nexport const PUSH_POSITION = 'USER_PATH/PUSH__POSITION' as const\n\nexport const userPathReducer = (\n  state: UserPathState = initialState,\n  action: Action\n): UserPathState => {\n  switch (action.type) {\n    case PUSH_POSITION:\n      return { ...state, path: [...state.path, action.position] }\n    default:\n      return state\n  }\n}\n","export * from './app-reducer'\r\nexport * from './app-store'\r\nexport * from './types'","import { UserPathState } from './types'\n\nexport const initialState: UserPathState = {\n  path: [],\n}\n","import { PUSH_POSITION } from './reducer'\n\nexport const pushPositionAction = (position: GeolocationPosition) => ({\n  type: PUSH_POSITION,\n  position,\n})\n","import { AppState } from '../types'\nimport { createSelector } from 'reselect'\nimport * as GeoJSON from 'geojson'\n\nexport const getUserPathSelector = (state: AppState): GeolocationPosition[] =>\n  state.userPath.path\n\nexport const getUserPathSourceSelector = createSelector(\n  getUserPathSelector,\n  (geoPath): GeoJSON.Feature<GeoJSON.Geometry> => ({\n    type: 'Feature',\n    properties: {},\n    geometry: {\n      type: 'LineString',\n      coordinates: geoPath.map((i) => [i.coords.longitude, i.coords.latitude]),\n    },\n  })\n)\n","import { combineReducers } from 'redux'\nimport { userPathReducer } from './user-path'\n\nexport const appReducer = combineReducers({\n  userPath: userPathReducer,\n})\n","import { createStore } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { appReducer } from \".\";\r\n\r\nexport const appStore = createStore(\r\n  appReducer,\r\n  composeWithDevTools()\r\n)"],"sourceRoot":""}