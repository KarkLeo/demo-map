{"version":3,"sources":["components/MapEditor/style.ts","components/MapEditor/MapEditor.tsx","components/UserPath/UserPath.tsx","common/hooks/useUserGeoWatch.ts","services/navigator.ts","components/MapBase/MapBase.tsx","components/MapBase/config.ts","App.tsx","reportWebVitals.ts","index.tsx","store/user-path/index.ts","store/user-path/reducer.ts","store/index.ts","store/user-path/state.ts","store/user-path/actions.ts","store/user-path/selector.ts","store/app-reducer.ts","store/app-store.ts"],"names":["getEditHandleStyle","feature","state","RENDER_STATE","SELECTED","HOVERED","UNCOMMITTED","fill","fillOpacity","stroke","strokeWidth","r","getFeatureStyle","index","CLOSING","strokeDasharray","buttonWrap","position","top","right","display","flexDirection","gap","MapEditor","mode","setMode","useState","selectedFeatureIndex","setSelectedFeatureIndex","editorRef","useRef","onSelect","useCallback","options","onUpdate","editType","EditingMode","onDelete","current","deleteFeatures","ref","style","width","height","clickRadius","editHandleShape","featureStyle","editHandleStyle","featuresDraggable","onClick","DrawPolygonMode","UserPath","path","useSelector","getUserPathSourceSelector","id","type","data","layout","paint","useUserGeoWatch","dispatch","useDispatch","pos","setPos","useEffect","async","setPosState","navigator","geolocation","watchPosition","e","console","log","getCurrentPosition","getPosition","pushPositionAction","MapBase","viewport","setViewport","longitude","latitude","zoom","mapStyle","onViewportChange","mapboxApiAccessToken","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","store","appStore","document","getElementById","PUSH_POSITION","userPathReducer","initialState","action","createSelector","userPath","geoPath","properties","geometry","coordinates","map","i","coords","appReducer","combineReducers","createStore","composeWithDevTools"],"mappings":"4LAGO,MAAMA,EAAoD,EAAEC,UAASC,YAC1E,OAAQA,GACN,KAAKC,eAAaC,SAClB,KAAKD,eAAaE,QAClB,KAAKF,eAAaG,YAChB,MAAO,CACLC,KAAM,oBACNC,YAAa,EACbC,OAAQ,qBACRC,YAAa,EACbC,EAAG,GAGP,QACE,MAAO,CACLJ,KAAM,oBACNC,YAAa,EACbC,OAAQ,qBACRC,YAAa,EACbC,EAAG,KAKEC,EAAiD,EAAEX,UAASY,QAAOX,YAC9E,OAAQA,GACN,KAAKC,eAAaC,SAClB,KAAKD,eAAaE,QAClB,KAAKF,eAAaG,YAClB,KAAKH,eAAaW,QAChB,MAAO,CACLL,OAAQ,oBACRC,YAAa,EACbH,KAAM,oBACNC,YAAa,GACbO,gBAAiB,OAGrB,QACE,MAAO,CACLN,OAAQ,oBACRC,YAAa,EACbH,KAAM,oBACNC,YAAa,M,WCzCrB,MAAMQ,EAA6B,CACjCC,SAAU,QACVC,IAAK,OACLC,MAAO,OACPC,QAAS,OACTC,cAAe,SACfC,IAAK,QAoDQC,MAjDa,KAC1B,MAAOC,EAAMC,GAAWC,mBAA+C,OAChEC,EAAsBC,GAA2BF,mBAEtD,MAEIG,EAAYC,iBAAe,MAE3BC,EAAWC,uBAAaC,IAC5BL,EAAwBK,GAAWA,EAAQN,wBAC1C,IAEGO,EAAWF,uBAAY,EAAGG,eACb,eAAbA,GACFV,EAAQ,IAAIW,iBAEb,IAEGC,EAAWL,uBAAY,KACE,OAAzBL,GAAiCA,GAAwB,GAC3DE,EAAUS,SACRT,EAAUS,QAAQC,eAAeZ,KAEpC,CAACA,IAIJ,OACE,qCACE,cAAC,SAAD,CACEa,IAAKX,EACLY,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAChCC,YAAa,GACbpB,KAAMA,EACNO,SAAUA,EACVG,SAAUA,EACVW,gBAAiB,SACjBC,aAAclC,EACdmC,gBAAiB/C,EACjBgD,mBAAmB,IAErB,sBAAKP,MAAOzB,EAAZ,UACE,wBAAQiC,QAAS,IAAMxB,EAAQ,IAAIyB,mBAAnC,sBACA,wBAAQD,QAASZ,EAAjB,2B,gBChCOc,MApBY,KACzB,MAAMC,EAAOC,YAAYC,6BACzB,OACE,cAAC,SAAD,CAAQC,GAAG,UAAUC,KAAK,UAAUC,KAAML,EAA1C,SACE,cAAC,QAAD,CACEG,GAAG,kBACHC,KAAK,OACLE,OAAQ,CACN,YAAa,QACb,WAAY,SAEdC,MAAO,CACL,aAAc,OACd,aAAc,QCETC,MAfS,KACtB,MAAMC,EAAWC,eACVC,EAAKC,GAAUtC,mBAAqC,MAC3DuC,qBAAU,KACYC,gBCTUA,OAChCC,UAKMC,UAAUC,YAAYC,eAHNrD,IACpBkD,EAAYlD,MAE2CsD,GAAMC,QAAQC,IAAIF,MDIjEG,CAAmBV,IAE3BW,KACC,CAACX,IAEJC,qBAAU,KACJF,GAAKF,EAASe,6BAAmBb,MACpC,CAACA,EAAKF,KE0BIgB,MAjCW,KACxB,MAAOC,EAAUC,GAAerD,mBAAS,CACvCsD,WAAY,OACZC,SAAU,MACVC,KAAM,KAKR,OAFAtB,IAGE,qBACEnB,MAAO,CACLC,MAAO,QACPC,OAAQ,SAHZ,SAME,eAAC,UAAD,IACMmC,EACJ7B,QAAUsB,GAAMC,QAAQC,IAAIF,GAC5B7B,MAAM,OACNC,OAAO,OACPwC,SC7Ba,qDD8BbC,iBAAkBL,EAClBM,qBChCN,6FDyBI,UASE,cAAC,oBAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,UEzBOC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCOSC,MAZUC,IACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,EAAGC,SAAQC,SAAQC,SAAQC,SAAQC,cAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,iBCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOC,WAAjB,SAA2B,cAAC,EAAD,QAE7BC,SAASC,eAAe,SAM1Bf,K,gCCnBA,qpB,gCCAA,gFAEO,MAAMgB,EAAgB,2BAEhBC,EAAkB,CAC7BvG,EAAuBwG,eACvBC,KAEA,OAAQA,EAAOnD,MACb,KAAKgD,EACH,MAAO,IAAKtG,EAAOkD,KAAM,IAAIlD,EAAMkD,KAAMuD,EAAO1F,WAClD,QACE,OAAOf,K,gCCZb,uH,mDCEA,kCAAO,MAAMwG,EAA8B,CACzCtD,KAAM,K,gCCHR,8CAEO,MAAMwB,EAAsB3D,IAAD,CAChCuC,KAAMgD,IACNvF,c,gCCHF,8CAGO,MAGMqC,EAA4BsD,aAHL1G,GAClCA,EAAM2G,SAASzD,OAId0D,IAAD,CACEtD,KAAM,UACNuD,WAAY,GACZC,SAAU,CACRxD,KAAM,aACNyD,YAAaH,EAAQI,KAAKC,GAAM,CAACA,EAAEC,OAAOpC,UAAWmC,EAAEC,OAAOnC,kB,gCCdpE,sDAGO,MAAMoC,EAAaC,0BAAgB,CACxCT,SAAUJ,qB,gCCJZ,8DAIO,MAAMJ,EAAWkB,sBACtBF,aACAG,kC","file":"static/js/main.2285dda0.chunk.js","sourcesContent":["import {RENDER_STATE} from 'react-map-gl-draw';\r\nimport {editHandleStyle as defaultEditHandleStyle} from \"react-map-gl-draw/dist-types/style\";\r\n\r\nexport const getEditHandleStyle: typeof defaultEditHandleStyle = ({feature, state}) =>  {\r\n  switch (state) {\r\n    case RENDER_STATE.SELECTED:\r\n    case RENDER_STATE.HOVERED:\r\n    case RENDER_STATE.UNCOMMITTED:\r\n      return {\r\n        fill: 'rgb(251, 176, 59)',\r\n        fillOpacity: 1,\r\n        stroke: 'rgb(255, 255, 255)',\r\n        strokeWidth: 2,\r\n        r: 7\r\n      };\r\n\r\n    default:\r\n      return {\r\n        fill: 'rgb(251, 176, 59)',\r\n        fillOpacity: 1,\r\n        stroke: 'rgb(255, 255, 255)',\r\n        strokeWidth: 2,\r\n        r: 5\r\n      };\r\n  }\r\n}\r\n\r\nexport const getFeatureStyle: typeof defaultEditHandleStyle = ({feature, index, state}) => {\r\n  switch (state) {\r\n    case RENDER_STATE.SELECTED:\r\n    case RENDER_STATE.HOVERED:\r\n    case RENDER_STATE.UNCOMMITTED:\r\n    case RENDER_STATE.CLOSING:\r\n      return {\r\n        stroke: 'rgb(251, 176, 59)',\r\n        strokeWidth: 2,\r\n        fill: 'rgb(251, 176, 59)',\r\n        fillOpacity: 0.3,\r\n        strokeDasharray: '4,2'\r\n      };\r\n\r\n    default:\r\n      return {\r\n        stroke: 'rgb(60, 178, 208)',\r\n        strokeWidth: 2,\r\n        fill: 'rgb(60, 178, 208)',\r\n        fillOpacity: 0.1\r\n      };\r\n  }\r\n}","import React, { useCallback, useRef, useState } from 'react'\r\nimport { DrawPolygonMode, EditingMode, Editor } from 'react-map-gl-draw'\r\nimport { getEditHandleStyle, getFeatureStyle } from './style'\r\nimport CSS from 'csstype'\r\n\r\nconst buttonWrap: CSS.Properties = {\r\n  position: 'fixed',\r\n  top: '20px',\r\n  right: '20px',\r\n  display: 'flex',\r\n  flexDirection: 'column',\r\n  gap: '10px',\r\n}\r\n\r\nconst MapEditor: React.FC = () => {\r\n  const [mode, setMode] = useState<EditingMode | DrawPolygonMode | null>(null)\r\n  const [selectedFeatureIndex, setSelectedFeatureIndex] = useState<\r\n    number | null\r\n  >(null)\r\n\r\n  const editorRef = useRef<Editor>(null)\r\n\r\n  const onSelect = useCallback((options) => {\r\n    setSelectedFeatureIndex(options && options.selectedFeatureIndex)\r\n  }, [])\r\n\r\n  const onUpdate = useCallback(({ editType }) => {\r\n    if (editType === 'addFeature') {\r\n      setMode(new EditingMode())\r\n    }\r\n  }, [])\r\n\r\n  const onDelete = useCallback(() => {\r\n    if (selectedFeatureIndex !== null && selectedFeatureIndex >= 0) {\r\n      editorRef.current &&\r\n        editorRef.current.deleteFeatures(selectedFeatureIndex)\r\n    }\r\n  }, [selectedFeatureIndex])\r\n\r\n  // if (editorRef.current) editorRef.current.addFeatures(myFeatures)\r\n\r\n  return (\r\n    <>\r\n      <Editor\r\n        ref={editorRef}\r\n        style={{ width: '100%', height: '100%' }}\r\n        clickRadius={12}\r\n        mode={mode as any}\r\n        onSelect={onSelect}\r\n        onUpdate={onUpdate}\r\n        editHandleShape={'circle'}\r\n        featureStyle={getFeatureStyle}\r\n        editHandleStyle={getEditHandleStyle}\r\n        featuresDraggable={true}\r\n      />\r\n      <div style={buttonWrap}>\r\n        <button onClick={() => setMode(new DrawPolygonMode())}>New poly</button>\r\n        <button onClick={onDelete}>Delete</button>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MapEditor\r\n","import React from 'react'\r\nimport { Layer, Source } from 'react-map-gl'\r\nimport { useSelector } from 'react-redux'\r\nimport { getUserPathSourceSelector } from 'store/user-path'\r\n\r\nconst UserPath: React.FC = () => {\r\n  const path = useSelector(getUserPathSourceSelector)\r\n  return (\r\n    <Source id='my-data' type='geojson' data={path}>\r\n      <Layer\r\n        id='user-path-layer'\r\n        type='line'\r\n        layout={{\r\n          'line-join': 'round',\r\n          'line-cap': 'round',\r\n        }}\r\n        paint={{\r\n          'line-color': '#f0f',\r\n          'line-width': 8,\r\n        }}\r\n      />\r\n    </Source>\r\n  )\r\n}\r\n\r\nexport default UserPath\r\n","import { useEffect, useState } from 'react'\r\nimport { getCurrentPosition } from 'services/navigator'\r\nimport { useDispatch } from 'react-redux'\r\nimport { pushPositionAction } from 'store/user-path'\r\n\r\nconst useUserGeoWatch = () => {\r\n  const dispatch = useDispatch()\r\n  const [pos, setPos] = useState<GeolocationPosition | null>(null)\r\n  useEffect(() => {\r\n    const getPosition = async () => {\r\n      await getCurrentPosition(setPos)\r\n    }\r\n    getPosition()\r\n  }, [setPos])\r\n\r\n  useEffect(() => {\r\n    if (pos) dispatch(pushPositionAction(pos))\r\n  }, [pos, dispatch])\r\n}\r\n\r\nexport default useUserGeoWatch\r\n","export const getCurrentPosition = async (\r\n  setPosState: (pos: null | GeolocationPosition) => void\r\n): Promise<void> => {\r\n  const readPosition = (position: GeolocationPosition) => {\r\n    setPosState(position)\r\n  }\r\n  await navigator.geolocation.watchPosition(readPosition, (e) => console.log(e))\r\n}\r\n","import React, { useState } from 'react'\r\nimport MapGL, { NavigationControl } from 'react-map-gl'\r\nimport MapEditor from '../MapEditor/MapEditor'\r\nimport UserPath from '../UserPath/UserPath'\r\nimport useUserGeoWatch from 'common/hooks/useUserGeoWatch'\r\nimport { TOKEN, STYLE } from './config'\r\n\r\n// const TOKEN = process.env.REACT_APP_MAPBOX_TOKEN\r\n// const STYLE = process.env.REACT_APP_MAPBOX_STYLE\r\n\r\nconst MapBase: React.FC = () => {\r\n  const [viewport, setViewport] = useState({\r\n    longitude: -91.874,\r\n    latitude: 42.76,\r\n    zoom: 12,\r\n  })\r\n\r\n  useUserGeoWatch()\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        width: '100vw',\r\n        height: '100vh',\r\n      }}\r\n    >\r\n      <MapGL\r\n        {...viewport}\r\n        onClick={(e) => console.log(e)}\r\n        width='100%'\r\n        height='100%'\r\n        mapStyle={STYLE}\r\n        onViewportChange={setViewport}\r\n        mapboxApiAccessToken={TOKEN}\r\n      >\r\n        <NavigationControl />\r\n        <MapEditor />\r\n        <UserPath />\r\n      </MapGL>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MapBase\r\n","export const TOKEN =\r\n  'pk.eyJ1Ijoia2Fyay1sZW8iLCJhIjoiY2tycWswbnF1MDk2ajJ3bzB6eWE5OGgyZSJ9.LOcclpJ7wZ_L-udL_G7JQA'\r\nexport const STYLE = 'mapbox://styles/kark-leo/ckrq5pa1k7b9j17qr2tvv7ixy'\r\n","import React from 'react';\r\nimport './App.css';\r\nimport MapBase from './components/MapBase/MapBase';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <MapBase/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\nimport { appStore } from './store';\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={appStore}><App /></Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","export * from './types'\r\nexport * from './state'\r\nexport * from './reducer'\r\nexport * from './actions'\r\nexport * from './selector'\r\n","import { Action, initialState, UserPathState } from './'\r\n\r\nexport const PUSH_POSITION = 'USER_PATH/PUSH__POSITION' as const\r\n\r\nexport const userPathReducer = (\r\n  state: UserPathState = initialState,\r\n  action: Action\r\n): UserPathState => {\r\n  switch (action.type) {\r\n    case PUSH_POSITION:\r\n      return { ...state, path: [...state.path, action.position] }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","export * from './app-reducer'\r\nexport * from './app-store'\r\nexport * from './types'","import { UserPathState } from './types'\r\n\r\nexport const initialState: UserPathState = {\r\n  path: [],\r\n}\r\n","import { PUSH_POSITION } from './reducer'\r\n\r\nexport const pushPositionAction = (position: GeolocationPosition) => ({\r\n  type: PUSH_POSITION,\r\n  position,\r\n})\r\n","import { AppState } from '../types'\r\nimport { createSelector } from 'reselect'\r\nimport * as GeoJSON from 'geojson'\r\n\r\nexport const getUserPathSelector = (state: AppState): GeolocationPosition[] =>\r\n  state.userPath.path\r\n\r\nexport const getUserPathSourceSelector = createSelector(\r\n  getUserPathSelector,\r\n  (geoPath): GeoJSON.Feature<GeoJSON.Geometry> => ({\r\n    type: 'Feature',\r\n    properties: {},\r\n    geometry: {\r\n      type: 'LineString',\r\n      coordinates: geoPath.map((i) => [i.coords.longitude, i.coords.latitude]),\r\n    },\r\n  })\r\n)\r\n","import { combineReducers } from 'redux'\r\nimport { userPathReducer } from './user-path'\r\n\r\nexport const appReducer = combineReducers({\r\n  userPath: userPathReducer,\r\n})\r\n","import { createStore } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { appReducer } from \".\";\r\n\r\nexport const appStore = createStore(\r\n  appReducer,\r\n  composeWithDevTools()\r\n)"],"sourceRoot":""}