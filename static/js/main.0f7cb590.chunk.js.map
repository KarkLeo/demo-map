{"version":3,"sources":["components/MapEditor/style.ts","components/MapEditor/MapEditor.tsx","components/UserPath/UserPath.tsx","common/hooks/useUserGeoWatch.ts","services/navigator.ts","components/MapBase/component/ViewportInfo/ViewportInfo.tsx","components/ModeButtons/ModeButtons.tsx","components/CurrentPoint/CurrentPoint.tsx","components/MapBase/MapBase.tsx","components/MapBase/config.ts","App.tsx","reportWebVitals.ts","index.tsx","store/user-path/index.ts","store/mode/index.ts","store/mode/reducer.ts","store/user-path/reducer.ts","store/index.ts","store/user-path/state.ts","store/user-path/actions.ts","store/user-path/selector.ts","store/mode/state.ts","store/mode/actions.ts","store/mode/selector.ts","store/app-reducer.ts","store/app-store.ts"],"names":["getEditHandleStyle","feature","state","RENDER_STATE","SELECTED","HOVERED","UNCOMMITTED","fill","fillOpacity","stroke","strokeWidth","r","getFeatureStyle","index","CLOSING","strokeDasharray","buttonWrap","position","zIndex","top","right","display","flexDirection","gap","MapEditor","mode","setMode","useState","EditingMode","console","log","constructor","name","selectedFeatureIndex","setSelectedFeatureIndex","editorRef","useRef","onSelect","useCallback","options","onUpdate","editType","onDelete","current","deleteFeatures","ref","style","width","height","clickRadius","editHandleShape","featureStyle","editHandleStyle","featuresDraggable","onClick","DrawPolygonMode","UserPath","path","useSelector","getUserPathSourceSelector","id","type","data","layout","paint","useUserGeoWatch","callback","dispatch","useDispatch","useEffect","async","setPosState","navigator","geolocation","watchPosition","e","enableHighAccuracy","maximumAge","getCurrentPosition","pos","pushPositionAction","getPosition","ViewportInfo","viewport","longitude","latitude","zoom","className","toFixed","ModeButtons","getModeSelector","turnOnNavigateHandler","turnOnNavigateAction","turnOnEditHandler","turnOnEditAction","turnOnFreeHandler","turnOnFreeAction","classNames","disabled","CurrentPoint","getUserPositionSelector","coords","MapBase","setViewport","mapStyle","onViewportChange","mapboxApiAccessToken","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","store","appStore","document","getElementById","TURN_ON_NAVIGATE","TURN_ON_EDIT","TURN_ON_FREE","modeReducer","initialState","action","PUSH_POSITION","userPathReducer","userPath","createSelector","geoPath","properties","geometry","coordinates","map","i","appReducer","combineReducers","createStore","composeWithDevTools"],"mappings":"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","file":"static/js/main.0f7cb590.chunk.js","sourcesContent":["import {RENDER_STATE} from 'react-map-gl-draw';\r\nimport {editHandleStyle as defaultEditHandleStyle} from \"react-map-gl-draw/dist-types/style\";\r\n\r\nexport const getEditHandleStyle: typeof defaultEditHandleStyle = ({feature, state}) =>  {\r\n  switch (state) {\r\n    case RENDER_STATE.SELECTED:\r\n    case RENDER_STATE.HOVERED:\r\n    case RENDER_STATE.UNCOMMITTED:\r\n      return {\r\n        fill: 'rgb(251, 176, 59)',\r\n        fillOpacity: 1,\r\n        stroke: 'rgb(255, 255, 255)',\r\n        strokeWidth: 2,\r\n        r: 7\r\n      };\r\n\r\n    default:\r\n      return {\r\n        fill: 'rgb(251, 176, 59)',\r\n        fillOpacity: 1,\r\n        stroke: 'rgb(255, 255, 255)',\r\n        strokeWidth: 2,\r\n        r: 5\r\n      };\r\n  }\r\n}\r\n\r\nexport const getFeatureStyle: typeof defaultEditHandleStyle = ({feature, index, state}) => {\r\n  switch (state) {\r\n    case RENDER_STATE.SELECTED:\r\n    case RENDER_STATE.HOVERED:\r\n    case RENDER_STATE.UNCOMMITTED:\r\n    case RENDER_STATE.CLOSING:\r\n      return {\r\n        stroke: 'rgb(251, 176, 59)',\r\n        strokeWidth: 2,\r\n        fill: 'rgb(251, 176, 59)',\r\n        fillOpacity: 0.3,\r\n        strokeDasharray: '4,2'\r\n      };\r\n\r\n    default:\r\n      return {\r\n        stroke: 'rgb(60, 178, 208)',\r\n        strokeWidth: 2,\r\n        fill: 'rgb(60, 178, 208)',\r\n        fillOpacity: 0.1\r\n      };\r\n  }\r\n}","import React, { useCallback, useRef, useState } from 'react'\nimport { DrawPolygonMode, EditingMode, Editor } from 'react-map-gl-draw'\nimport { getEditHandleStyle, getFeatureStyle } from './style'\nimport CSS from 'csstype'\n\nconst buttonWrap: CSS.Properties = {\n  position: 'fixed',\n  zIndex: 999,\n  top: '30px',\n  right: '20px',\n  display: 'flex',\n  flexDirection: 'column',\n  gap: '10px',\n}\n\nconst MapEditor: React.FC = () => {\n  const [mode, setMode] = useState<EditingMode | DrawPolygonMode>(\n    new EditingMode()\n  )\n  console.log(mode && mode.constructor.name)\n  const [selectedFeatureIndex, setSelectedFeatureIndex] = useState<\n    number | null\n  >(null)\n\n  const editorRef = useRef<Editor>(null)\n\n  const onSelect = useCallback((options) => {\n    setSelectedFeatureIndex(options && options.selectedFeatureIndex)\n  }, [])\n\n  const onUpdate = useCallback(({ editType }) => {\n    if (editType === 'addFeature') {\n      setMode(new EditingMode())\n    }\n  }, [])\n\n  const onDelete = useCallback(() => {\n    if (selectedFeatureIndex !== null && selectedFeatureIndex >= 0) {\n      editorRef.current &&\n        editorRef.current.deleteFeatures(selectedFeatureIndex)\n    }\n  }, [selectedFeatureIndex])\n\n  // if (editorRef.current) editorRef.current.addFeatures(myFeatures)\n\n  return (\n    <>\n      <Editor\n        ref={editorRef}\n        style={{ width: '100%', height: '100%' }}\n        clickRadius={12}\n        mode={mode as any}\n        onSelect={onSelect}\n        onUpdate={onUpdate}\n        editHandleShape={'circle'}\n        featureStyle={getFeatureStyle}\n        editHandleStyle={getEditHandleStyle}\n        featuresDraggable={true}\n      />\n      <div style={buttonWrap}>\n        {mode && mode.constructor.name !== 'DrawPolygonMode' && (\n          <button onClick={() => setMode(new DrawPolygonMode())}>\n            New poly\n          </button>\n        )}\n        {mode &&\n          mode.constructor.name !== 'DrawPolygonMode' &&\n          selectedFeatureIndex !== null && (\n            <button onClick={onDelete}>Delete</button>\n          )}\n      </div>\n    </>\n  )\n}\n\nexport default MapEditor\n","import React from 'react'\nimport { Layer, Source } from 'react-map-gl'\nimport { useSelector } from 'react-redux'\nimport { getUserPathSourceSelector } from 'store/user-path'\n\nconst UserPath: React.FC = () => {\n  const path = useSelector(getUserPathSourceSelector)\n  return (\n    <Source id='my-data' type='geojson' data={path}>\n      <Layer\n        id='user-path-layer'\n        type='line'\n        layout={{\n          'line-join': 'round',\n          'line-cap': 'round',\n        }}\n        paint={{\n          'line-color': '#01579b',\n          'line-width': 6,\n        }}\n      />\n    </Source>\n  )\n}\n\nexport default UserPath\n","import { useEffect } from 'react'\nimport { getCurrentPosition } from 'services/navigator'\nimport { useDispatch } from 'react-redux'\nimport { pushPositionAction } from 'store/user-path'\n\nconst useUserGeoWatch = (\n  callback?: (position: GeolocationPosition) => void\n) => {\n  const dispatch = useDispatch()\n  useEffect(() => {\n    const getPosition = async () => {\n      await getCurrentPosition((pos) => {\n        if (pos) {\n          dispatch(pushPositionAction(pos))\n          callback && callback(pos)\n        }\n      })\n    }\n    getPosition()\n  }, [dispatch, callback])\n}\n\nexport default useUserGeoWatch\n","export const getCurrentPosition = async (\n  setPosState: (pos: null | GeolocationPosition) => void\n): Promise<void> => {\n  const readPosition = (position: GeolocationPosition) => {\n    setPosState(position)\n  }\n  await navigator.geolocation.watchPosition(\n    readPosition,\n    (e) => console.log(e),\n    {\n      enableHighAccuracy: true,\n      maximumAge: 5 * 1000,\n    }\n  )\n}\n","import Rect from 'react'\n\nimport './ViewportInfo.css'\n\ninterface ViewportInfoProps {\n  viewport: {\n    longitude: number\n    latitude: number\n    zoom: number\n  }\n}\n\nconst ViewportInfo: Rect.FC<ViewportInfoProps> = ({\n  viewport: { longitude, latitude, zoom },\n}) => {\n  return (\n    <div className='viewport-info'>\n      <span className='viewport-info__item'>\n        longitude: {longitude.toFixed(4)}\n      </span>\n      <span className='viewport-info__item'>\n        latitude: {latitude.toFixed(4)}\n      </span>\n      <span className='viewport-info__item'>zoom: {zoom.toFixed(4)}</span>\n    </div>\n  )\n}\n\nexport default ViewportInfo\n","import React, { useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  getModeSelector,\n  turnOnEditAction,\n  turnOnFreeAction,\n  turnOnNavigateAction,\n} from 'store/mode'\nimport classNames from 'classnames'\nimport './ModeButtons.css'\n\nconst ModeButtons: React.FC = () => {\n  const dispatch = useDispatch()\n  const mode = useSelector(getModeSelector)\n\n  const turnOnNavigateHandler = useCallback(\n    () => dispatch(turnOnNavigateAction()),\n    [dispatch]\n  )\n  const turnOnEditHandler = useCallback(\n    () => dispatch(turnOnEditAction()),\n    [dispatch]\n  )\n\n  const turnOnFreeHandler = useCallback(\n    () => dispatch(turnOnFreeAction()),\n    [dispatch]\n  )\n\n  return (\n    <div className='mode-bar'>\n      <button\n        onClick={turnOnFreeHandler}\n        className={classNames('mode-bar__button', {\n          'mode-bar__button--active': mode === 'FREE',\n        })}\n        disabled={mode === 'FREE'}\n      >\n        Free mode\n      </button>\n      <button\n        onClick={turnOnNavigateHandler}\n        className={classNames('mode-bar__button', {\n          'mode-bar__button--active': mode === 'NAVIGATE',\n        })}\n        disabled={mode === 'NAVIGATE'}\n      >\n        Navigate mode\n      </button>\n      <button\n        onClick={turnOnEditHandler}\n        className={classNames('mode-bar__button', {\n          'mode-bar__button--active': mode === 'EDIT',\n        })}\n        disabled={mode === 'EDIT'}\n      >\n        Edit mode\n      </button>\n    </div>\n  )\n}\n\nexport default ModeButtons\n","import React from 'react'\nimport { Marker } from 'react-map-gl'\nimport { useSelector } from 'react-redux'\nimport { getUserPositionSelector } from '../../store/user-path'\nimport './CurrentPoint.css'\n\nconst CurrentPoint: React.FC = () => {\n  const position = useSelector(getUserPositionSelector)\n  return (\n    position && (\n      <Marker\n        longitude={position.coords.longitude}\n        latitude={position.coords.latitude}\n      >\n        <div className='point' />\n      </Marker>\n    )\n  )\n}\n\nexport default CurrentPoint\n","import React, { useEffect, useState } from 'react'\nimport MapGL, { NavigationControl } from 'react-map-gl'\nimport MapEditor from '../MapEditor/MapEditor'\nimport UserPath from '../UserPath/UserPath'\nimport useUserGeoWatch from 'common/hooks/useUserGeoWatch'\nimport { STYLE, TOKEN } from './config' // Need to GitHub pages work\nimport ViewportInfo from './component/ViewportInfo/ViewportInfo'\nimport ModeButtons from 'components/ModeButtons/ModeButtons'\nimport { useSelector } from 'react-redux'\nimport { getModeSelector } from 'store/mode'\nimport { getUserPositionSelector } from 'store/user-path'\nimport CurrentPoint from '../CurrentPoint/CurrentPoint'\n\n// const TOKEN = process.env.REACT_APP_MAPBOX_TOKEN\n// const STYLE = process.env.REACT_APP_MAPBOX_STYLE\n\nconst MapBase: React.FC = () => {\n  const [viewport, setViewport] = useState({\n    longitude: -91.874,\n    latitude: 42.76,\n    zoom: 12,\n  })\n\n  const mode = useSelector(getModeSelector)\n  const position = useSelector(getUserPositionSelector)\n\n  useEffect(() => {\n    switch (mode) {\n      case 'FREE':\n        return undefined\n      case 'NAVIGATE': {\n        position &&\n          setViewport({\n            longitude: position.coords.longitude,\n            latitude: position.coords.latitude,\n            zoom: 16,\n          })\n        return undefined\n      }\n    }\n  }, [mode, position, setViewport])\n\n  useUserGeoWatch()\n\n  return (\n    <div\n      style={{\n        width: '100vw',\n        height: '100vh',\n      }}\n    >\n      <MapGL\n        {...viewport}\n        width='100%'\n        height='100%'\n        mapStyle={STYLE}\n        onViewportChange={setViewport}\n        mapboxApiAccessToken={TOKEN}\n      >\n        {mode !== 'NAVIGATE' && <NavigationControl />}\n        {mode === 'EDIT' && <MapEditor />}\n        <UserPath />\n        <CurrentPoint />\n      </MapGL>\n      <ViewportInfo viewport={viewport} />\n      <ModeButtons />\n    </div>\n  )\n}\n\nexport default MapBase\n","export const TOKEN =\r\n  'pk.eyJ1Ijoia2Fyay1sZW8iLCJhIjoiY2tycTVqeDF5MDRmaDJucHF6bjl0aWRlMSJ9.fVvoRu7-JIUyyIkbFQ9vQA'\r\n  //'pk.eyJ1Ijoia2Fyay1sZW8iLCJhIjoiY2tycWswbnF1MDk2ajJ3bzB6eWE5OGgyZSJ9.LOcclpJ7wZ_L-udL_G7JQA'\r\nexport const STYLE = 'mapbox://styles/kark-leo/ckrq5pa1k7b9j17qr2tvv7ixy'\r\n","import React from 'react';\r\nimport './App.css';\r\nimport MapBase from './components/MapBase/MapBase';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <MapBase/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\nimport { appStore } from './store';\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={appStore}><App /></Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","export * from './types'\r\nexport * from './state'\r\nexport * from './reducer'\r\nexport * from './actions'\r\nexport * from './selector'\r\n","export * from './types'\nexport * from './state'\nexport * from './reducer'\nexport * from './actions'\nexport * from './selector'\n","import { Action, initialState, ModeState } from './'\n\nexport const TURN_ON_NAVIGATE = 'MODE/TURN_ON_NAVIGATE' as const\nexport const TURN_ON_EDIT = 'MODE/TURN_ON_EDIT' as const\nexport const TURN_ON_FREE = 'MODE/TURN_ON_FREE' as const\n\nexport const modeReducer = (\n  state: ModeState = initialState,\n  action: Action\n): ModeState => {\n  switch (action.type) {\n    case TURN_ON_NAVIGATE:\n      return { ...state, mode: 'NAVIGATE' }\n    case TURN_ON_EDIT:\n      return { ...state, mode: 'EDIT' }\n    case TURN_ON_FREE:\n      return { ...state, mode: 'FREE' }\n    default:\n      return state\n  }\n}\n","import { Action, initialState, UserPathState } from './'\n\nexport const PUSH_POSITION = 'USER_PATH/PUSH__POSITION' as const\n\nexport const userPathReducer = (\n  state: UserPathState = initialState,\n  action: Action\n): UserPathState => {\n  switch (action.type) {\n    case PUSH_POSITION:\n      return {\n        ...state,\n        path: [...state.path, action.position],\n        position: action.position,\n      }\n    default:\n      return state\n  }\n}\n","export * from './app-reducer'\r\nexport * from './app-store'\r\nexport * from './types'","import { UserPathState } from './types'\n\nexport const initialState: UserPathState = {\n  path: [],\n  position: null,\n}\n","import { PUSH_POSITION } from './reducer'\r\n\r\nexport const pushPositionAction = (position: GeolocationPosition) => ({\r\n  type: PUSH_POSITION,\r\n  position,\r\n})\r\n","import { AppState } from '../types'\nimport { createSelector } from 'reselect'\nimport * as GeoJSON from 'geojson'\n\nexport const getUserPathSelector = (state: AppState): GeolocationPosition[] =>\n  state.userPath.path\n\nexport const getUserPositionSelector = (\n  state: AppState\n): GeolocationPosition | null => state.userPath.position\n\nexport const getUserPathSourceSelector = createSelector(\n  getUserPathSelector,\n  (geoPath): GeoJSON.Feature<GeoJSON.Geometry> => ({\n    type: 'Feature',\n    properties: {},\n    geometry: {\n      type: 'LineString',\n      coordinates: geoPath.map((i) => [i.coords.longitude, i.coords.latitude]),\n    },\n  })\n)\n","import { ModeState } from './types'\n\nexport const initialState: ModeState = {\n  mode: 'FREE',\n}\n","import { TURN_ON_EDIT, TURN_ON_FREE, TURN_ON_NAVIGATE } from './reducer'\n\nexport const turnOnEditAction = () => ({\n  type: TURN_ON_EDIT,\n})\n\nexport const turnOnNavigateAction = () => ({\n  type: TURN_ON_NAVIGATE,\n})\n\nexport const turnOnFreeAction = () => ({\n  type: TURN_ON_FREE,\n})\n","import { AppState } from '../types'\nimport { ModeType } from './types'\n\nexport const getModeSelector = (state: AppState): ModeType => state.mode.mode\n","import { combineReducers } from 'redux'\nimport { userPathReducer } from './user-path'\nimport { modeReducer } from './mode'\n\nexport const appReducer = combineReducers({\n  userPath: userPathReducer,\n  mode: modeReducer,\n})\n","import { createStore } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { appReducer } from \".\";\r\n\r\nexport const appStore = createStore(\r\n  appReducer,\r\n  composeWithDevTools()\r\n)"],"sourceRoot":""}